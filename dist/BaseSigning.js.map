{"version":3,"file":"BaseSigning.js","sourceRoot":"","sources":["../lib/BaseSigning.ts"],"names":[],"mappings":";;AAAA,kCAAkC;AAClC,uCAAqD;AAMrD,MAAa,WAAW;IACtB,YAAmB,UAA8B,EAAE;QAAhC,YAAO,GAAP,OAAO,CAAyB;QACjD,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,iBAAO,CAAC,gBAAgB,CAAC;IAC5E,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,SAA4B;QACzC,IAAI,SAAS,YAAY,iBAAO,EAAE;YAChC,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAI,iBAAO,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,IAAY,EAAE,SAA2B;QACnD,MAAM,OAAO,GAAY,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAEjD,4CAA4C;QAC5C,MAAM,WAAW,GAAe,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1F,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;QAC3E,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,IAAY,EAAE,SAAiB,EAAE,SAA8B;QAC3E,IAAI,gBAA4B,CAAC;QAEjC,6BAA6B;QAC7B,IAAI,SAAS,IAAI,SAAS,YAAY,UAAU,EAAE;YAChD,gBAAgB,GAAG,SAAS,CAAC;SAC9B;aAAM,IAAI,SAAS,EAAE;YACpB,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAmB,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC7F;QAED,8CAA8C;QAC9C,MAAM,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAmB,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClG,MAAM,WAAW,GAAe,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1F,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IACpF,CAAC;CACF;AA7CD,kCA6CC","sourcesContent":["import * as nacl from \"tweetnacl\";\nimport { KeyPair, KeyPairEncoding } from \"./KeyPair\";\n\nexport interface BaseSigningOptions {\n  encoding?: KeyPairEncoding;\n}\n\nexport class BaseSigning {\n  constructor(public options: BaseSigningOptions = {}) {\n    this.options.encoding = this.options.encoding || KeyPair.DEFAULT_ENCODING;\n  }\n\n  /**\n   * Generates a new Key Pair.\n   */\n  public keyPair(secretKey?: string | KeyPair): KeyPair {\n    if (secretKey instanceof KeyPair) {\n      return secretKey;\n    }\n    return new KeyPair({ secretKey, encoding: this.options.encoding });\n  }\n\n  /**\n   * Generates a new hex signature using Secret Key.\n   */\n  public sign(data: string, secretKey: string | KeyPair): string {\n    const keyPair: KeyPair = this.keyPair(secretKey);\n\n    // Encode properly and sign using secret key\n    const encodedData: Uint8Array = Uint8Array.from(Buffer.from(data, this.options.encoding));\n    const signature = nacl.sign.detached(encodedData, keyPair.raw().secretKey);\n    return Buffer.from(signature).toString(this.options.encoding);\n  }\n\n  /**\n   * Checks signature using public key.\n   */\n  public verify(data: string, signature: string, publicKey: string | Uint8Array): boolean {\n    let decodedPublicKey: Uint8Array;\n\n    // Preperly decode public key\n    if (publicKey && publicKey instanceof Uint8Array) {\n      decodedPublicKey = publicKey;\n    } else if (publicKey) {\n      decodedPublicKey = Uint8Array.from(Buffer.from(publicKey as string, this.options.encoding));\n    }\n\n    // Preperly decode and verify using public key\n    const decodedSignature = Uint8Array.from(Buffer.from(signature as string, this.options.encoding));\n    const encodedData: Uint8Array = Uint8Array.from(Buffer.from(data, this.options.encoding));\n    return nacl.sign.detached.verify(encodedData, decodedSignature, decodedPublicKey);\n  }\n}\n"]}