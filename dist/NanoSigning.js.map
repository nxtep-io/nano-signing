{"version":3,"file":"NanoSigning.js","sourceRoot":"","sources":["../lib/NanoSigning.ts"],"names":[],"mappings":";;AAAA,+CAAgE;AAOhE,MAAa,WAAY,SAAQ,yBAAW;IAC1C,YAAmB,UAA8B,EAAE;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;QADE,YAAO,GAAP,OAAO,CAAyB;QAEjD,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;IACpE,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,IAAS,EAAE,SAA2B;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,IAAS,EAAE,SAAiB,EAAE,SAA8B;QACxE,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACxD,CAAC;CACF;AArBD,kCAqBC","sourcesContent":["import { BaseSigning, BaseSigningOptions } from \"./BaseSigning\";\nimport { KeyPair } from \"./KeyPair\";\n\nexport interface NanoSigningOptions extends BaseSigningOptions {\n  serialize?: (data: any) => string\n}\n\nexport class NanoSigning extends BaseSigning {\n  constructor(public options: NanoSigningOptions = {}) {\n    super(options);\n    this.options.serialize = this.options.serialize || JSON.stringify;\n  }\n\n  /**\n   * Generates a new hex signature using Secret Key.\n   */\n  public sign(data: any, secretKey: string | KeyPair): string {\n    const serialized = this.options.serialize(data);\n    return super.sign(serialized, secretKey);\n  }\n\n  /**\n   * Checks signature using public key.\n   */\n  public verify(data: any, signature: string, publicKey: string | Uint8Array): boolean {\n    const serialized = this.options.serialize(data);\n    return super.verify(serialized, signature, publicKey);\n  }\n}\n"]}