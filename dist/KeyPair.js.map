{"version":3,"file":"KeyPair.js","sourceRoot":"","sources":["../lib/KeyPair.ts"],"names":[],"mappings":";;AAAA,kCAAkC;AASlC,MAAa,OAAO;IAKlB;;;;OAIG;IACH,YAAsB,UAA0B,EAAE;QAA5B,YAAO,GAAP,OAAO,CAAqB;QAChD,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAE1E,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,YAAY,UAAU,EAAE;YAChE,+DAA+D;YAC/D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,SAAuB,CAAC,CAAC;SACvF;aAAM,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,YAAY,MAAM,EAAE;YACnD,8CAA8C;YAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;SAC1F;aAAM,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACjC,0DAA0D;YAC1D,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAmB,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SAC1E;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;SACrC;IACH,CAAC;IAED;;OAEG;IACH,SAAS;QACP,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC9E,CAAC;IAED;;OAEG;IACH,SAAS;QACP,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC9E,CAAC;IAED;;OAEG;IACH,GAAG;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;;AA5Ca,wBAAgB,GAAoB,KAAK,CAAC;AAH1D,0BAgDC","sourcesContent":["import * as nacl from \"tweetnacl\";\n\nexport type KeyPairEncoding = \"hex\" | \"base64\";\n\nexport interface KeyPairOptions {\n  encoding?: KeyPairEncoding;\n  secretKey?: string | Buffer | Uint8Array;\n}\n\nexport class KeyPair {\n  protected _keyPair: nacl.SignKeyPair;\n\n  public static DEFAULT_ENCODING: KeyPairEncoding = \"hex\";\n\n  /**\n   * Initializes a KeyPair from specified options, or generates a new one if none passed.\n   *\n   * @param options The keypair initialization options\n   */\n  constructor(protected options: KeyPairOptions = {}) {\n    this.options.encoding = this.options.encoding || KeyPair.DEFAULT_ENCODING;\n\n    if (options.secretKey && options.secretKey instanceof Uint8Array) {\n      // Secret key is alreayd a Uint8Array, nothing needs to be done\n      this._keyPair = nacl.sign.keyPair.fromSecretKey(this.options.secretKey as Uint8Array);\n    } else if (this.options.secretKey instanceof Buffer) {\n      // Secret key is a buffer, needs some handling\n      this._keyPair = nacl.sign.keyPair.fromSecretKey(Uint8Array.from(this.options.secretKey));\n    } else if (this.options.secretKey) {\n      // Secret key is not a buffer, we need to convert it first\n      const buffer = Buffer.from(this.options.secretKey as string, this.options.encoding);\n      this._keyPair = nacl.sign.keyPair.fromSecretKey(Uint8Array.from(buffer));\n    } else {\n      this._keyPair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Gets encoded public key.\n   */\n  publicKey() {\n    return Buffer.from(this._keyPair.publicKey).toString(this.options.encoding);\n  }\n\n  /**\n   * Gets encoded secret key.\n   */\n  secretKey() {\n    return Buffer.from(this._keyPair.secretKey).toString(this.options.encoding);\n  }\n\n  /**\n   * Gets raw keypair with keys as Uint8Array instances.\n   */\n  raw() {\n    return this._keyPair;\n  }\n}\n"]}